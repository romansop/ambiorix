/****************************************************************************
**
** SPDX-License-Identifier: BSD-2-Clause-Patent
**
** SPDX-FileCopyrightText: Copyright (c) 2023 SoftAtHome
**
** Redistribution and use in source and binary forms, with or without modification,
** are permitted provided that the following conditions are met:
**
** 1. Redistributions of source code must retain the above copyright notice,
** this list of conditions and the following disclaimer.
**
** 2. Redistributions in binary form must reproduce the above copyright notice,
** this list of conditions and the following disclaimer in the documentation
** and/or other materials provided with the distribution.
**
** Subject to the terms and conditions of this license, each copyright holder
** and contributor hereby grants to those receiving rights under this license
** a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable
** (except for failure to satisfy the conditions of this license) patent license
** to make, have made, use, offer to sell, sell, import, and otherwise transfer
** this software, where such license applies only to those patent claims, already
** acquired or hereafter acquired, licensable by such copyright holder or contributor
** that are necessarily infringed by:
**
** (a) their Contribution(s) (the licensed copyrights of copyright holders and
** non-copyrightable additions of contributors, in source or binary form) alone;
** or
**
** (b) combination of their Contribution(s) with the work of authorship to which
** such Contribution(s) was added by such copyright holder or contributor, if,
** at the time the Contribution is added, such addition causes such combination
** to be necessarily infringed. The patent license shall not apply to any other
** combinations which include the Contribution.
**
** Except as expressly stated above, no rights or licenses from any copyright
** holder or contributor is granted under this license, whether expressly, by
** implication, estoppel or otherwise.
**
** DISCLAIMER
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
** USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
****************************************************************************/
%persistent object NeMo {
    %persistent object Intf[] {
        string Name;
        bool Enable;
        bool Status;
        string Flags {
            on action validate call check_enum [ "cross", "colors" ];
            default "colors";
        }

        object ULIntf[] {
            %read-only string Name;
        }
        object LLIntf[] {
            %read-only string Name;
        }

        object Query[] {
            string Description;
            string Subscribers;
            string ResultString;

            variant getResult();
            void setPeriodicInform(%in uint32 interval, %out string data);

            object TestObject[] {
                string Text;
            }
        }

        %async void AsyncTestFunc();
    }
}

%read-only object TestTopLevel {
    
}

%populate {
    object NeMo.Intf {
        instance add(0, "lan") {
            parameter Name = "lan";
            parameter Enable = true;

            object Query {
                instance add(100, "") {
                    parameter ResultString = "ok";
                }
            }
        }
        instance add(0, "wan") {
            parameter Name = "wan";
            parameter Enable = false;
            object Query {
                instance add(200, "") {
                    parameter ResultString = "nok";
                }
                instance add(210, "test") {
                    parameter ResultString = "true";
                }
                instance add(220, "") {
                    parameter ResultString = "true";
                }
            }
        }
        instance add(0, "wifi") {
            parameter Name = "wifi";
            parameter Enable = false;
            object Query {
                instance add(300, "") {
                    parameter ResultString = "nok";
                }
                instance add(310, "") {
                    parameter ResultString = "test";
                }
            }
            object ULIntf {
                instance add(0, "") {
                    parameter Name = "wan";
                }
            }
        }
        instance add(0, "virt") {
            parameter Name = "wan";
            parameter Enable = false;
            object Query {
                instance add(400, "") {
                    parameter ResultString = "nok";
                }
                instance add(410, "test") {
                    parameter ResultString = "true";
                }
                instance add(420, "") {
                    parameter ResultString = "true";
                }
            }
        }

    }
}