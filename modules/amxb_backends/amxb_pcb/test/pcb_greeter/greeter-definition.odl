/****************************************************************************
**
** SPDX-License-Identifier: BSD-2-Clause-Patent
**
** SPDX-FileCopyrightText: Copyright (c) 2023 SoftAtHome
**
** Redistribution and use in source and binary forms, with or without modification,
** are permitted provided that the following conditions are met:
**
** 1. Redistributions of source code must retain the above copyright notice,
** this list of conditions and the following disclaimer.
**
** 2. Redistributions in binary form must reproduce the above copyright notice,
** this list of conditions and the following disclaimer in the documentation
** and/or other materials provided with the distribution.
**
** Subject to the terms and conditions of this license, each copyright holder
** and contributor hereby grants to those receiving rights under this license
** a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable
** (except for failure to satisfy the conditions of this license) patent license
** to make, have made, use, offer to sell, sell, import, and otherwise transfer
** this software, where such license applies only to those patent claims, already
** acquired or hereafter acquired, licensable by such copyright holder or contributor
** that are necessarily infringed by:
**
** (a) their Contribution(s) (the licensed copyrights of copyright holders and
** non-copyrightable additions of contributors, in source or binary form) alone;
** or
**
** (b) combination of their Contribution(s) with the work of authorship to which
** such Contribution(s) was added by such copyright holder or contributor, if,
** at the time the Contribution is added, such addition causes such combination
** to be necessarily infringed. The patent license shall not apply to any other
** combinations which include the Contribution.
**
** Except as expressly stated above, no rights or licenses from any copyright
** holder or contributor is granted under this license, whether expressly, by
** implication, estoppel or otherwise.
**
** DISCLAIMER
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
** USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
****************************************************************************/
using "greeter.so";

persistent object Greeter {
	// Greeter data model API 
	// 
	// adds a message in the history, prints it to stdout
	void say(mandatory string from, mandatory string message, bool retain, out string result);

	// echos the data
	void echo(in out mandatory variant data);

	// changes the maximum instances of the history template object
	void setMaxHistory(mandatory uint32 max);

	// Save the data model
	void save(mandatory string filename);

	// Load the data model
	void load(mandatory string filename);

	persistent read-only uint32 MaxHistory {
		constraint minvalue 1;
		default 10;
	}

	// History is a template object
	// No hard limitation of instances defined
	persistent read-only object History[] {
		// This will add the "HistorySize" parameter to the parent object
		// The parameter will be read-only of type uint32
		counted with HistorySize;

		// clear all messages from the history
		template-only uint32 clear(bool force);

		// reverses the message and returns the reversed message
		// Demonstrates a instance function.
		string reverse();

		void sendNotification();

		// "Message" parameter is a string limited in size to 256 bytes
		persistent string Message {
			constraint maxvalue 256;
			default "";
		}
		
		// "From" parameter is a string limited in size to 64 bytes
		persistent string From {
			constraint maxvalue 64;
			default "";
		}

		persistent bool Retain;

		object TestObject[] {
			key string Text = "";
			uint32 Number;

			void TestFunc();
		}

		object STest {
			string Text = "";
		}
	}
}
