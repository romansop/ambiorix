/****************************************************************************
**
** SPDX-License-Identifier: BSD-2-Clause-Patent
**
** SPDX-FileCopyrightText: Copyright (c) 2023 SoftAtHome
**
** Redistribution and use in source and binary forms, with or without modification,
** are permitted provided that the following conditions are met:
**
** 1. Redistributions of source code must retain the above copyright notice,
** this list of conditions and the following disclaimer.
**
** 2. Redistributions in binary form must reproduce the above copyright notice,
** this list of conditions and the following disclaimer in the documentation
** and/or other materials provided with the distribution.
**
** Subject to the terms and conditions of this license, each copyright holder
** and contributor hereby grants to those receiving rights under this license
** a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable
** (except for failure to satisfy the conditions of this license) patent license
** to make, have made, use, offer to sell, sell, import, and otherwise transfer
** this software, where such license applies only to those patent claims, already
** acquired or hereafter acquired, licensable by such copyright holder or contributor
** that are necessarily infringed by:
**
** (a) their Contribution(s) (the licensed copyrights of copyright holders and
** non-copyrightable additions of contributors, in source or binary form) alone;
** or
**
** (b) combination of their Contribution(s) with the work of authorship to which
** such Contribution(s) was added by such copyright holder or contributor, if,
** at the time the Contribution is added, such addition causes such combination
** to be necessarily infringed. The patent license shall not apply to any other
** combinations which include the Contribution.
**
** Except as expressly stated above, no rights or licenses from any copyright
** holder or contributor is granted under this license, whether expressly, by
** implication, estoppel or otherwise.
**
** DISCLAIMER
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
** USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
****************************************************************************/
#!/usr/bin/amxrt

%config {
    // Application name
    name = "test_dm";

    uris = ["pcb:/tmp/test.sock"];
    backends = ["/usr/bin/mods/amxb/mod-amxb-pcb.so"];

    // amxrt config-options
    auto-detect = false;
    auto-connect = true;
    daemon = false;
    priority = 0;
}

%define {
    object Device {
        object Ethernet {
            bool WolSupport = false;

            object Interface[] {
                counted with InterfaceNumberOfEntries;
                bool Enable = true;
                string Status {
                    default "Down";
                    on action validate call check_enum ["Up", "Down", "Unknown", "Dormant", "NotPresent", "LowerLayerDown", "Error"];
                }

                object Stats {
                    uint32 BytesSent;
                    uint32 BytesReceived;
                }
            }
        }
    }
}

%define {
    object MQTT {
        object Capabilities {
            %read-only csv_string ProtocolVersionsSupported = "3.1,3.1.1,5.0";
            %read-only csv_string TransportProtocolSupported = "TCP/IP,TLS,WebSocket";
        }

        object Client[] {
            counted with ClientNumberOfEntries;

            %unique %key string Alias;
            string Name;
            bool Enable = false;
            %read-only string Status = "Disabled" {
                on action validate call check_enum 
                    ["Disabled", "Connecting", "Connected",
                     "Error_Misconfigured", "Error_BrokerUnreachable",
                     "Error"];
            }
            string BrokerAddress;
            uint32 BrokerPort = 1883;
            string TransportProtocol = "TCP/IP";
            bool CleanSession = true;
            bool CleanStart = true;
            uint32 KeepAliveTime = 60;
            string ClientId = "";
        }
    }
}

%populate {
    object Device.Ethernet.Interface {
        instance add (0,"") {
            parameter Status = "Up";
        }
        instance add (0,"") {
            parameter Status = "Down";
        }
        instance add (0,"") {
            parameter Enable = false;
            parameter Status = "NotPresent";
        }
        instance add (0,"") {
            parameter Enable = false;
            parameter Status = "Error";
        }
        instance add (0,"") {
            parameter Status = "Dormant";
        }
    }
}

%populate {
    object MQTT.Client {
        instance add(0, "cpe-mybroker") {
            parameter Name = "MyBroker";
            parameter BrokerAddress = "www.mybroker.com";
            parameter ClientId = "test";
        }
        instance add(0, "cpe-hivemq") {
            parameter Name = "HiveMQ";
            parameter BrokerAddress = "www.hivemq.com";
            parameter ClientId = "test-hivemq";
        }
    }
}
