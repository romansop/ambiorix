/****************************************************************************
**
** SPDX-License-Identifier: BSD-2-Clause-Patent
**
** SPDX-FileCopyrightText: Copyright (c) 2023 SoftAtHome
**
** Redistribution and use in source and binary forms, with or without modification,
** are permitted provided that the following conditions are met:
**
** 1. Redistributions of source code must retain the above copyright notice,
** this list of conditions and the following disclaimer.
**
** 2. Redistributions in binary form must reproduce the above copyright notice,
** this list of conditions and the following disclaimer in the documentation
** and/or other materials provided with the distribution.
**
** Subject to the terms and conditions of this license, each copyright holder
** and contributor hereby grants to those receiving rights under this license
** a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable
** (except for failure to satisfy the conditions of this license) patent license
** to make, have made, use, offer to sell, sell, import, and otherwise transfer
** this software, where such license applies only to those patent claims, already
** acquired or hereafter acquired, licensable by such copyright holder or contributor
** that are necessarily infringed by:
**
** (a) their Contribution(s) (the licensed copyrights of copyright holders and
** non-copyrightable additions of contributors, in source or binary form) alone;
** or
**
** (b) combination of their Contribution(s) with the work of authorship to which
** such Contribution(s) was added by such copyright holder or contributor, if,
** at the time the Contribution is added, such addition causes such combination
** to be necessarily infringed. The patent license shall not apply to any other
** combinations which include the Contribution.
**
** Except as expressly stated above, no rights or licenses from any copyright
** holder or contributor is granted under this license, whether expressly, by
** implication, estoppel or otherwise.
**
** DISCLAIMER
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
** USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
****************************************************************************/
%define {
    %persistent object Greeter {
        %persistent %read-only object History[] {
            counted with NumberOfHistoryEntries;
            
            %persistent %read-only string From {
                on action validate call check_maximum_length 64;
            }
            %persistent %read-only string Message {
                on action validate call check_maximum_length 256;
            }
            %persistent bool Retain = false;

            object Info[] {
                counted with NumberOfInfoEntries;
                string Text = "";
            }
        }
    }

    object Object {
        object With {
            object NoAcls {
                string Text;
            }
        }
    }

    object Device {
        object IP {
            object Interface[] {
                counted with InterfaceNumberOfEntries;
                %persistent bool Enable;
                %persistent bool IPv4Enable;
                %persistent bool IPv6Enable;
                %persistent bool ULAEnable;
                %read-only string Status {
                    default "Unknown";
                }
                %persistent %unique %key string Alias {
                    on action validate call check_maximum_length 64;
                }
                %persistent string Name {
                    on action validate call check_maximum_length 64;
                    default "";
                }
                %read-only uint32 LastChange;
                %persistent string LowerLayers {
                    on action validate call check_maximum_length 1024;
                }
                %persistent string Router {
                     on action validate call check_maximum_length 256;
                     default "Device.Routing.Router.1.";
                }
                %persistent uint32 MaxMTUSize {
                    on action validate call check_range { min = 64, max = 65535 };
                    default 1500;
                }
                string Type {
                    on action validate call check_enum ["Normal", "Loopback", "Tunnel", "Tunneled"];
                    default "Normal";
                }
                %persistent bool Loopback;
                %persistent bool AutoIPEnable = false;
            }
        }

        object WiFi {
            object Radio[] {
                string Alias;
                bool Enable;
                string Status;
                string Name;
            }
        }
    }
}

%populate {
    object Greeter.History {
        instance add() {
            parameter From = "odl parser";
            parameter Message = "Welcome to the Greeter App";
            parameter Retain = true;
        }
        instance add() {
            parameter From = "me";
            parameter Message = "My message";
            parameter Retain = false;
        }
        instance add() {
            parameter From = "agent007";
            parameter Message = "Currently spying";
            parameter Retain = false;
        }
    }
    object Device.IP.Interface {
        instance add() {
            parameter Enable = false;
            parameter Name = "First";
        }
        instance add() {
            parameter Enable = true;
            parameter Name = "Second";
        }
    }
    object Device.WiFi.Radio {
        instance add() {
            parameter Enable = false;
            parameter Name = "First";
        }
        instance add() {
            parameter Enable = true;
            parameter Name = "Second";
        }
    }
}
