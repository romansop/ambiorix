/****************************************************************************
**
** Copyright (c) 2020 SoftAtHome
**
** Redistribution and use in source and binary forms, with or
** without modification, are permitted provided that the following
** conditions are met:
**
** 1. Redistributions of source code must retain the above copyright
** notice, this list of conditions and the following disclaimer.
**
** 2. Redistributions in binary form must reproduce the above
** copyright notice, this list of conditions and the following
** disclaimer in the documentation and/or other materials provided
** with the distribution.
**
** Subject to the terms and conditions of this license, each
** copyright holder and contributor hereby grants to those receiving
** rights under this license a perpetual, worldwide, non-exclusive,
** no-charge, royalty-free, irrevocable (except for failure to
** satisfy the conditions of this license) patent license to make,
** have made, use, offer to sell, sell, import, and otherwise
** transfer this software, where such license applies only to those
** patent claims, already acquired or hereafter acquired, licensable
** by such copyright holder or contributor that are necessarily
** infringed by:
**
** (a) their Contribution(s) (the licensed copyrights of copyright
** holders and non-copyrightable additions of contributors, in
** source or binary form) alone; or
**
** (b) combination of their Contribution(s) with the work of
** authorship to which such Contribution(s) was added by such
** copyright holder or contributor, if, at the time the Contribution
** is added, such addition causes such combination to be necessarily
** infringed. The patent license shall not apply to any other
** combinations which include the Contribution.
**
** Except as expressly stated above, no rights or licenses from any
** copyright holder or contributor is granted under this license,
** whether expressly, by implication, estoppel or otherwise.
**
** DISCLAIMER
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
** CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
** INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
** CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
** USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
** AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
** ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
**
****************************************************************************/
%config {
    test_option_number = 123;
    test_option_string = "This is a text";
    test_option_bool = true; 
    counter_name = "TestNumberOfEntries";
    object_name = "TestSingeltonObjectAttr";
    instance_name = "Name2";
    function_name = "func16";
    the_unique_param = "UniqueParam";
}

import "test_plugin.so" as test_plugin;

print "Hello";

print "Resolve functions = ${odl-resolve}";

%define {
    entry-point test_plugin.test_entry_point;

    mib TestMib {
        void mibfunc();

        string mibparam = "123";

        object MibObject;
    }
    
    object TestObjectRoot {

        object TestObjectSingelton;
        %protected %read-only %persistent %private object TestObjSingletonAttr;
        object TestObjectTemplate[];
        %protected %read-only %persistent %private object TestObjTemplateAttr[];

        object TestObjectParamTypes {
            string Param1 {
                default "choice1";
                on action validate call check_enum [ "choiceA", "choice1", "choiceB" ];
            }
            int32 Param2;
            int64 Param3 {
                on action validate call check_range { min = -10, max = -1 };
                default -5;
            }
            uint32 Param4;
            uint64 Param5;
            bool Param6;
            double Param7;
            ssv_string Param8;
            csv_string Param9;
            int8 Param10;
            int16 Param11;
            uint8 Param12;
            uint16 Param13;
        }

        object TestObjectFunctions {
            void func1();
            string func2();
            int32 func3();
            int64 func4();
            uint32 func5();
            uint64 func6();
            bool func7();
            double func8();
            list func9();
            htable func10();
            variant func11();
            void func12(string arg1,
                        int32 arg2,
                        int64 arg3,
                        uint32 arg4,
                        uint64 arg5,
                        bool arg6,
                        double arg7,
                        list arg8,
                        htable arg9,
                        variant arg10,
                        int8 arg11,
                        int16 arg12,
                        uint8 arg13,
                        uint16 arg14);
            int8 func13();
            int16 func14();
            uint8 func15();
            uint16 '${function_name}'();
        }

        %protected %read-only %persistent object "${object_name}" {
            %read-only %persistent %private %template %instance %volatile string Param1;
        }

        object TestSingeltonParamAttr {
            %protected %read-only %persistent %private %template %instance %volatile string Param1;
        }
        object TestTemplateParamAttr[] {
            counted with "${counter_name}";
            %protected %read-only %persistent %private %template %instance %volatile string Param1;
            %template string Param2 {
                on action validate call check_enum [ "value1", "value2", "value3" ];
                default "value2";
            }
            %instance string Param3;
        }

        object TestSingletonFuncAttr {
            %protected %private %template %instance void TestFunc1();
            void TestFunc2(%mandatory %in %out %strict int32 number);
        }
        object TestTemplateFuncAttr {
            %private %template %instance void TestFunc1();
            %template void TestFunc2();
            %instance void TestFunc3();
            void TestFunc4(%mandatory %in %out %strict int32 number);
        }

        object TestObjectTemplateWithChild[] {
            counted with TestObjectTemplateWithChildCounter;
            object TemplateChildObject {
                string Param1;
                void func1();
            }
        }

        object TestObjectTemplateWithKeys[] {
            %key string KeyPart1;
            %mutable %key uint32 KeyPart2;
            %key string KeyPart3;
            %unique string '${the_unique_param}';

            string Param1;
            bool Param2;
        }

        %read-only object TestChangeAttr {
            %private string Param1;
            %private void Func1();
        }

        object ExtendWithTestMib {
            extend using mib TestMib;

            int32 TestParam {
                on action read call test_dummy_action;
            }
        }

        object TestObjectEvent {
            string Text;

            event 'MyEvent!';
        }
    }
}

%populate {
    object TestObjectRoot.TestObjectTemplateWithChild {
        instance add(1,"Name1") {
            object TemplateChildObject {
                parameter Param1 = "Some Text";
            }
        }
        instance add(2,"${instance_name}") {
            extend using mib TestMib;
        }
    }

    object TestObjectRoot.TestTemplateParamAttr {
        parameter Param2 = "value1";
        parameter Param1 = "This is param 1";
        instance add(99,"") {
            parameter Param1 = "This is param 1 in instance";
            parameter Param3 = "Hello World";
        }
        instance add(0, "");
    }

    object TestObjectRoot.TestObjectTemplateWithKeys {
        instance add(1,"", 
                     KeyPart1 = "Key1A",
                     KeyPart2 = 100,
                     KeyPart3 = "Key1B") {
            parameter Param1= "Some Text";
            parameter Param2 = true;
            parameter '${the_unique_param}' = "Key1";
        }
        instance add(0,"Test", 
                     KeyPart1 = "Key2A",
                     KeyPart2 = 100,
                     KeyPart3 = "Key2B") {
            parameter Param1= "Some Text";
            parameter Param2 = true;
            parameter '${the_unique_param}' = "Key2";
        }
        instance add(KeyPart1 = "Key3A",
                     KeyPart2 = 1,
                     KeyPart3 = "Key3B") {
            parameter Param1= "Some Text";
            parameter Param2 = true;
            parameter '${the_unique_param}' = "Key3";
        }
    }

    !read-only %persistent object TestObjectRoot.TestChangeAttr {
        !private %read-only parameter Param1;
    }

    on event ".*" of ".*" call handle_event;
    on event ".*" call handle_events 
                  filter "object matches \"TestObjectRoot\.TestObjectTempl.*\"";
}

%config {
    define-behavior = {
        existing-object = "update"
    };
}

%define {
    object TestObjectRoot {
        object TestObjectTemplateWithKeys {
            object Test {
                void testfunc(%in string arg);
                string ExtraParameter = "TEST";
                void get();
            }
        }
    }
}